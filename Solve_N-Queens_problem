# Set the size of the board
n = 4

# Function to print the board configuration
def printSolution(board): 
    for i in range(n):
        print()
        for j in range(n): 
            print (board[i][j],end='') 

# Function to check if placing a queen in the current position is safe
def isSafe(board, row, col): 
    # Check if there is a queen in the same row
    for i in range(col): 
        if board[row][i] == 1: 
            return False

    # Check if there is a queen in the upper diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)): 
        if board[i][j] == 1: 
            return False

    # Check if there is a queen in the lower diagonal
    for i, j in zip(range(row, n, 1), range(col, -1, -1)): 
        if board[i][j] == 1: 
            return False

    # If no conflicts found, the current position is safe
    return True

# Recursive function to solve the N-Queens problem
def solveNQUtil(board, col): 
    # If all queens are placed, the solution is found
    if col >= n: 
        return True

    # Try placing a queen in each row of the current column
    for i in range(n): 
        if isSafe(board, i, col): 
            # Place the queen and move to the next column
            board[i][col] = 1

            # If placing the queen leads to a solution, return True
            if solveNQUtil(board, col + 1) == True: 
                return True

            # If placing the queen does not lead to a solution, backtrack and try the next row
            board[i][col] = 0

    # If no solution found for the current column, return False
    return False

# Function to solve the N-Queens problem
def solveNQ(): 
    # Create an empty board
    board = [ [0, 0, 0, 0], 
              [0, 0, 0, 0], 
              [0, 0, 0, 0], 
              [0, 0, 0, 0] 
             ] 

    # If no solution found, print a message and return False
    if solveNQUtil(board, 0) == False: 
        print ("Solution does not exist")
        return False

    # Print the solution
    printSolution(board) 
    return True

# Call the solveNQ function
solveNQ() 
